/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Project:		Zodea MU GameServer - Season 6
 * Developer:	RealCoderZ MU Development © 2011
 * Hint:		Recvieve Protocol Class
 * Coded By:	WolF & mesosa
 */
#include "StdAfx.H"
#include "SendProto.H"
#include "LogProc.H"
#include "Notice.H"
#include "Functions.H"


CSendProtocol gSendProto;
// -------------------------------------------------------------------------------------------------------------------------------------------------------
void CSendProtocol::DataSend(int aIndex, LPBYTE lpMsg, DWORD dwSize)
{
	gNet.DataSend(aIndex, lpMsg, dwSize);
}
// -------------------------------------------------------------------------------------------------------------------------------------------------------
void CSendProtocol::DataSendAll(LPBYTE lpMsg, DWORD dwSize)
{
	for ( int n=OBJMIN; n<OBJMAX; n++)
	{
		if ( gObj[n].Connected == PLAYER_PLAYING )
		{
			if ( gObj[n].Type == OBJ_USER )
			{
				this->DataSend(n, lpMsg, dwSize);
			}
		}
	}
}
// -------------------------------------------------------------------------------------------------------------------------------------------------------
void CSendProtocol::DataSendMap(int Map, LPBYTE lpMsg, DWORD dwSize)
{
	for ( int n=OBJMIN; n<OBJMAX; n++)
	{
		if ( gObj[n].Connected == PLAYER_PLAYING )
		{
			if ( gObj[n].Type == OBJ_USER )
			{
				if (gObj[n].MapNumber == Map)
				{
					this->DataSend(n, lpMsg, dwSize);
				}
			}
		}
	}
}
// -------------------------------------------------------------------------------------------------------------------------------------------------------
void CSendProtocol::DataSendGM(LPBYTE lpMsg, DWORD dwSize)
{
	for ( int n=OBJMIN; n<OBJMAX; n++)
	{
		if ( gObj[n].Connected == PLAYER_PLAYING )
		{
			if ( gObj[n].Type == OBJ_USER )
			{
				if ( (gObj[n].AuthorityCode&1) )
				{
					this->DataSend(n, lpMsg, dwSize);
				}
			}
		}
	}
}
// -------------------------------------------------------------------------------------------------------------------------------------------------------
void CSendProtocol::VPMsgSend(LPOBJ lpObj, LPBYTE lpMsg, int dwSize)
{
	for(int n=0;n<MAX_VIEWPORT;n++)
	{
		if ( lpObj->VpPlayer2[n].type == OBJ_USER )
		{
			if ( lpObj->VpPlayer2[n].state != 0 )
			{
				this->DataSend(lpObj->VpPlayer2[n].number, lpMsg, dwSize);
			}
		}
	}
}
// -------------------------------------------------------------------------------------------------------------------------------------------------------
void CSendProtocol::CloseMsgSend(int aIndex, BYTE Result)
{
	PMSG_RESULT pMsg	= {0};
	// -----
	C3SubPHeadSet((LPBYTE)&pMsg, 0xF1, 0x02, sizeof(PMSG_RESULT));
	// -----
	pMsg.result = Result;
	// -----
	this->DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
}
// -------------------------------------------------------------------------------------------------------------------------------------------------------
void CSendProtocol::NoUsersMessage(int aIndex)
{
	PMSG_SERVERMSG pMsg	= {0};
	// -----
	C1HeadSet((LPBYTE)&pMsg, 0x0C, sizeof(PMSG_SERVERMSG));
	// -----
	pMsg.MsgNumber = 0;
	// -----
	this->DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
}
// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------------------------------------------------------------